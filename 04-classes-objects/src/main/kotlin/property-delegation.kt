package course.kotlin

import kotlin.properties.Delegates
import kotlin.properties.PropertyDelegateProvider
import kotlin.properties.ReadOnlyProperty
import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty

class Delegate {
    var _value: String = ""
    operator fun getValue(thisRef: Any?, property: KProperty<*>): String {
        return "$thisRef, thank you for delegating '${property.name}' to me: $_value"
    }

    operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {
        _value = value
        println("$value has been assigned to '${property.name}' in $thisRef.")
    }
}

class ExampleDelegation {
    var prop: String by Delegate()
}

// top level property
var topProp: String by Delegate()

// lazy
val lazyValue: String by lazy(LazyThreadSafetyMode.PUBLICATION) {
    println("computed!")
    "Hello"
}

// observable
class User {
    var name: String by Delegates.observable("<no name>") { prop, old, new ->
        println("$old -> $new")
    }
}

// delegateing to another property
var topLevelInt: Int = 0

class ClassWithDelegate(val anotherClassInt: Int)

class MyClass7(var memberInt: Int, val anotherClassInstance: ClassWithDelegate) {
    var delegatedToMember: Int by this::memberInt
    var delegatedToTopLevel: Int by ::topLevelInt

    val delegatedToAnotherClass: Int by anotherClassInstance::anotherClassInt
}

var MyClass7.extDelegated: Int by ::topLevelInt

// @Deprecated
class MyClass8 {
    var newName: Int = 0

    @Deprecated("Use 'newName' instead", ReplaceWith("newName"))
    var oldName: Int by this::newName
}

// stoting properties in a map
class User2(private val map: Map<String, Any?>) {
    val name: String by map
    val age: Int by map
}

val user2 = User2(
    mapOf(
        "name" to "John Doe",
        "age" to 25
    )
)

class MutableUser(val map: MutableMap<String, Any?>) {
    var name: String by map
    var age: Int by map
}

val mutableUser = MutableUser(
    mutableMapOf(
        "name" to "John Doe",
        "age" to 25
    )
)

// local delegated properties
class Foo {
    fun isValid() = true
    fun doSomething() {}
}

val someCondition: Boolean = true
fun example(computeFoo: () -> Foo) {
    val memoizedFoo by lazy(computeFoo)

    if (someCondition && memoizedFoo.isValid()) {
        memoizedFoo.doSomething()
    }
}

// property delegation requirements
class Resource

class Owner {
    val valResource: Resource by ResourceDelegate()
}

class ResourceDelegate {
    operator fun getValue(thisRef: Owner, property: KProperty<*>): Resource {
        return Resource()
    }
}

class Resource2

class Owner2 {
    var varResource: Resource2 by ResourceDelegate2()
}

class ResourceDelegate2(private var resource: Resource2 = Resource2()) {
    operator fun getValue(thisRef: Owner2, property: KProperty<*>): Resource2 {
        return resource
    }

    operator fun setValue(thisRef: Owner2, property: KProperty<*>, value: Any?) {
        if (value is Resource2) {
            resource = value
        }
    }
}

// using ReadOnlyProperty and ReadWriteProperty
fun resourceDelegate(): ReadWriteProperty<Any?, Int> =
    object : ReadWriteProperty<Any?, Int> {
        var curValue = 0
        override fun getValue(thisRef: Any?, property: KProperty<*>): Int = curValue
        override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int) {
            curValue = value
        }
    }

val readOnly: Int by resourceDelegate()  // ReadWriteProperty as val
var readWrite: Int by resourceDelegate()

// translation rules
class Type
class MyDelegate
class C3 {
    var prop: Int by resourceDelegate()
}

// this code is generated by the compiler instead:
class C3Impl {
    private val propdelegate = resourceDelegate()
    var prop: Int
        get() = propdelegate.getValue(this, this::prop)
        set(value: Int) = propdelegate.setValue(this, this::prop, value)
}

// provideDelegate
class ResourceID<T>(val id: T) {
    companion object {
        val image_id: ResourceID<Int> = ResourceID(42)
        val text_id: ResourceID<String> = ResourceID("text")
    }
}

class ResourceDelegate4<T> : ReadOnlyProperty<MyUI, T> {
    override fun getValue(thisRef: MyUI, property: KProperty<*>): T = when (property.name) {
        "text" -> "108" as T
        "image" -> 108 as T
        else -> 108 as T
    }
}

class ResourceLoader4<T>(id: ResourceID<T>) {
    operator fun provideDelegate(
        thisRef: MyUI,
        prop: KProperty<*>
    ): ReadOnlyProperty<MyUI, T> {
        checkProperty(thisRef, prop.name)
        // create delegate
        return ResourceDelegate4()
    }

    private fun checkProperty(thisRef: MyUI, name: String) { /*...*/
    }
}

class MyUI {
    fun <T> bindResource(id: ResourceID<T>): ResourceLoader4<T> = ResourceLoader4(id)

    val image by bindResource(ResourceID.image_id)
    val text by bindResource(ResourceID.text_id)
}

//PropertyDelegateProvider
val provider = PropertyDelegateProvider { thisRef: Any?, property ->
    ReadOnlyProperty<Any?, Int> {_, property -> 42 }
}
val delegate: Int by provider


fun main() {
    val e = ExampleDelegation()
    e.prop = "NEW_VALUE"
    println(e.prop)

    // top prop
    topProp = "TOP PROP NEW VALUE"
    println(topProp)

    // lazy()
    println(lazyValue)
    println(lazyValue)

    // observable()
    val user = User()
    user.name = "first"
    user.name = "second"

    // delagation to another property
    val myClass8 = MyClass8()
    // Notification: 'oldName: Int' is deprecated.
    // Use 'newName' instead
    myClass8.oldName = 42
    println(myClass8.newName) // 42

    // delegation to map
    println(user2.name) // Prints "John Doe"
    println(user2.age)  // Prints 25
    println(mutableUser.name) // Prints "John Doe"
    println(mutableUser.age)  // Prints 25

    val myUI = MyUI()
    println(myUI.text)

}
